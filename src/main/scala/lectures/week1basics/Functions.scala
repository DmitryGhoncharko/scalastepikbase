package lectures.week1basics

object Functions extends App {
//  Функция создается следующим образом:
//
// 1   Начинается все с ключевого слова def
// 2 За которым следует имя функции
// 3 В круглых скобках (при необходимости) указываются параметры и их типы
// 4   После скобок ставится двоеточие и конкретизируется тип возвращаемого значения
//  Note: Отметим, что вполне возможно обойтись и без указания типа возвращаемого значения и положиться в этом деле на компилятор. Но мы все же не советуем так делать.
//
//  5. Наконец - ставится знак равенства и прописывается тело функции
    def printPerson(name:String):Unit ={
  println(name)
 }
  printPerson("Dmitry")
  //Функция без параметров
  def getPersonName():String={
    "Kate"
  }
  println(getPersonName())
//  В Scala мы можем задавать дефолтные значения для параметров,
//  что позволит нам лишний раз не указывать параметры при вызове функции.
//    Только следите за порядком аргументов.
  def getSimpleName(simpleName:String = "simple name"):String = {
   simpleName
}
  println(getSimpleName())
  println(getSimpleName("sos"))

//  Если для callByValue на экран выводятся два одинаковых значения, то для callByName значения будут разными.
//
//
//
//  Это объясняется разницей в подходах к вычислению значений параметров.
//
//    Вызов по значению подразумевает вычисление значения переданного выражения перед вызовом функции.
//    Преимущество: значение вычисляется только один раз.
//
//  Вызов по имени подразумевает вычисление значения выражения в момент его вызова в функции
//  Преимущество: значение не вычисляется, если не используется в теле функции.

  def callByValue(x: Long): Unit = {
    println(s"call by value: x1 = $x")
    println(s"call by value: x2 = $x")
  }

  def callByName(x: => Long): Unit = {
    println(s"call by name: x1 = $x")
    println(s"call by name: x2 = $x")
  }

  callByValue(System.nanoTime())
  callByName(System.nanoTime())

//  Еще одним моментом, который бы хотелось отметить - является возможность
//    определить функцию или даже несколько функций внутри одной функции и там же ее(или их) вызвать.
def aBossFunction(): String = {
  def aHelperFunction(): String = "I'm here to help"

  aHelperFunction()
}

}
